@startuml
title OS Simulator â€“ Detailed Overview

skinparam {
	backgroundColor #FFFFFF
	linetype ortho
	componentStyle rectangle
	shadowing false
	defaultFontName Courier
	defaultFontSize 12
	component {
		FontSize 12
		FontColor #141414
		BorderColor #424242
		StereotypeFontColor #424242
	}
	component {
		BackgroundColor<<external>> #F8CECC
		BackgroundColor<<file>> #F8CECC
	}
	rectangle {
		BorderColor #424242
		BackgroundColor<<boundary>> #FFFFFF
	}
	packagePadding 12
	componentSpacing 40
	nodesep 50
	ranksep 60
	ArrowColor #1F1F1F
	ArrowFontColor #1F1F1F
	ArrowFontSize 11
	ArrowThickness 1.3
}

left to right direction

rectangle "OS Simulator" as SYSTEM <<boundary>> {
	package "Application Layer" as APP #E8DAFF {
		component Main as MAIN #E8DAFF
		component SimulationRunner as SR #E8DAFF
		component SimulationContext as SC #E8DAFF
		MAIN -[hidden]down-> SR
		SR -[hidden]down-> SC
	}
	note right of APP
		Orchestrates CLI flow,
		scheduler selection,
		and simulation lifecycle.
	end note

	package "Core Engine" as CORE #D6E5FA {
		component SystemCallHandler as SCH #D6E5FA
		component SimulationClock as CLK #D6E5FA
		component ProcessControlBlock as PCB #D6E5FA
		component ExecutionSlice as SLICE #D6E5FA
		component ProcessReport as REPORT #D6E5FA
		component SchedulingResult as SRES #D6E5FA
		SCH -[hidden]down-> CLK
		CLK -[hidden]down-> PCB
		PCB -[hidden]down-> SLICE
		SLICE -[hidden]down-> REPORT
		REPORT -[hidden]down-> SRES
	}
	note right of CORE
		Coordinates execution slices,
		tracks process state, and
		produces scheduling metrics.
	end note

	package "I/O Subsystem" as IOZONE #FDE7D6 {
		component ProcessLoader as PL #FDE7D6
		component JobReader as JR #FDE7D6
		PL -[hidden]down-> JR
	}
	note right of IOZONE
		Streams jobs from file and
		builds process control blocks
		before admission.
	end note

	package "Memory Management" as MEM #E1F5E0 {
		component MemoryManager as MM #E1F5E0
	}
	note right of MEM
		Simulates main memory capacity
		and allocation decisions for
		incoming processes.
	end note

	package "Scheduling Strategies" as SCHEDZONE #FFF2CC {
		component Scheduler as SCHED <<interface>> #FFF2CC
		component RoundRobinScheduler as RR #FFF2CC
		component PriorityScheduler as PS #FFF2CC
		component SjfScheduler as SJF #FFF2CC
		SCHED -[hidden]down-> RR
		RR -[hidden]down-> PS
		PS -[hidden]down-> SJF
	}
	note right of SCHEDZONE
		Implements interchangeable
		CPU scheduling policies that
		consume ready queues.
	end note

	APP -[hidden]-> CORE
	CORE -[hidden]-> SCHEDZONE
	APP -[hidden]down-> IOZONE
	CORE -[hidden]down-> MEM
}

package "External Interfaces" #F8CECC {
	component "job.txt" as JOB <<file>> #F8CECC
	component "Console I/O" as CONSOLE <<external>> #F8CECC
}

actor "CLI User" as USER #F8CECC

USER -right-> MAIN : <color:#5B3D91>select algorithm
MAIN -right-> CONSOLE : <color:#A34747>emit menus & metrics
CONSOLE -left-> USER : <color:#A34747>show output
MAIN -down-> SR : <color:#5B3D91>orchestrate run
SR -down-> SC : <color:#5B3D91>bootstrap & monitor
SC -down-> PL : <color:#9C4E2F>request batches
PL -down-> JR : <color:#9C4E2F>read & parse jobs
PL -down-> PCB : <color:#0F3E8A>instantiate PCB
PL -right-> MM : <color:#2F6F36>allocate memory
SC -right-> SCH : <color:#0F3E8A>dispatch calls
SCH -down-> CLK : <color:#0F3E8A>tick clock
SCH -right-> SCHED : <color:#A68A00>schedule ready
SCHED <|.. RR
SCHED <|.. PS
SCHED <|.. SJF
SCH -down-> SLICE : <color:#0F3E8A>slice quantum
SCH -right-> MM : <color:#2F6F36>manage mem events
SCH -down-> REPORT : <color:#0F3E8A>persist metrics
REPORT -down-> SRES : <color:#0F3E8A>aggregate cycle
SCH -down-> PCB : <color:#0F3E8A>update state
SC -down-> REPORT : <color:#0F3E8A>summarize sim
JR -right-> JOB : <color:#A34747>stream jobs
REPORT -right-> CONSOLE : <color:#A34747>emit summaries
@enduml